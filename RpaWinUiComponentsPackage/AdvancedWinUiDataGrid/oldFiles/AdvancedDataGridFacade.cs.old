using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using RpaWinUiComponentsPackage.AdvancedWinUiDataGrid.Application.Interfaces;
using RpaWinUiComponentsPackage.AdvancedWinUiDataGrid.Application.Services;

namespace RpaWinUiComponentsPackage.AdvancedWinUiDataGrid;

/// <summary>
/// PUBLIC FACADE: Main entry point for AdvancedWinUiDataGrid functionality
/// CLEAN ARCHITECTURE: Facade pattern hiding internal implementation details
/// ENTERPRISE: Professional API for data grid operations
/// </summary>
public sealed class AdvancedDataGridFacade
{
    private readonly ISearchFilterService _searchFilterService;
    private readonly ISortService _sortService;
    private readonly IImportExportService _importExportService;
    private readonly ILogger<AdvancedDataGridFacade>? _logger;

    /// <summary>
    /// CONSTRUCTOR: Parameterless constructor using default internal implementations
    /// FACADE PATTERN: Simplifies usage without dependency injection
    /// </summary>
    public AdvancedDataGridFacade()
    {
        _searchFilterService = new SearchFilterService();
        _sortService = new SortService();
        _importExportService = new ImportExportService();
        _logger = null;
    }

    /// <summary>
    /// CONSTRUCTOR: Dependency injection constructor for testing and advanced scenarios
    /// INTERNAL: Not exposed to consumers, used by DI container
    /// </summary>
    internal AdvancedDataGridFacade(
        ISearchFilterService searchFilterService,
        ISortService sortService,
        IImportExportService importExportService,
        ILogger<AdvancedDataGridFacade>? logger = null)
    {
        _searchFilterService = searchFilterService ?? throw new ArgumentNullException(nameof(searchFilterService));
        _sortService = sortService ?? throw new ArgumentNullException(nameof(sortService));
        _importExportService = importExportService ?? throw new ArgumentNullException(nameof(importExportService));
        _logger = logger;
    }

    #region Search Operations

    /// <summary>
    /// PUBLIC API: Search data with specified query
    /// ASYNC: Non-blocking search operation
    /// </summary>
    public async Task<IReadOnlyList<IReadOnlyDictionary<string, object?>>> SearchAsync(
        IEnumerable<IReadOnlyDictionary<string, object?>> data,
        string query)
    {
        try
        {
            _logger?.LogInformation("Starting search operation with query: {Query}", query);
            return await _searchFilterService.SearchAsync(data, query);
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Error during search operation");
            throw;
        }
    }

    /// <summary>
    /// PUBLIC API: Synchronous search operation
    /// PERFORMANCE: Direct search without async overhead
    /// </summary>
    public IReadOnlyList<IReadOnlyDictionary<string, object?>> Search(
        IEnumerable<IReadOnlyDictionary<string, object?>> data,
        string query)
    {
        try
        {
            _logger?.LogInformation("Starting synchronous search operation with query: {Query}", query);
            return _searchFilterService.Search(data, query);
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Error during synchronous search operation");
            throw;
        }
    }

    #endregion

    #region Filter Operations

    /// <summary>
    /// PUBLIC API: Apply simple filter to data
    /// SIMPLIFIED: Easy-to-use filter method
    /// </summary>
    public async Task<IReadOnlyList<IReadOnlyDictionary<string, object?>>> FilterAsync(
        IEnumerable<IReadOnlyDictionary<string, object?>> data,
        string columnName,
        object? value)
    {
        try
        {
            _logger?.LogInformation("Applying filter on column {ColumnName} with value {Value}", columnName, value);
            return await _searchFilterService.QuickFilterAsync(data, columnName, value);
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Error during filter operation");
            throw;
        }
    }

    /// <summary>
    /// PUBLIC API: Get filterable column names
    /// UTILITY: Help users understand available columns
    /// </summary>
    public IReadOnlyList<string> GetFilterableColumns(IEnumerable<IReadOnlyDictionary<string, object?>> data)
    {
        try
        {
            return _searchFilterService.GetFilterableColumns(data);
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Error getting filterable columns");
            throw;
        }
    }

    #endregion

    #region Sort Operations

    /// <summary>
    /// PUBLIC API: Sort data by column in ascending order
    /// SIMPLIFIED: Most common sorting scenario
    /// </summary>
    public async Task<IReadOnlyList<IReadOnlyDictionary<string, object?>>> SortAscendingAsync(
        IEnumerable<IReadOnlyDictionary<string, object?>> data,
        string columnName)
    {
        try
        {
            _logger?.LogInformation("Sorting data by column {ColumnName} in ascending order", columnName);
            var result = await _sortService.SortAsync(data, columnName, SortDirection.Ascending);
            return result.SortedData;
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Error during ascending sort operation");
            throw;
        }
    }

    /// <summary>
    /// PUBLIC API: Sort data by column in descending order
    /// SIMPLIFIED: Common sorting scenario
    /// </summary>
    public async Task<IReadOnlyList<IReadOnlyDictionary<string, object?>>> SortDescendingAsync(
        IEnumerable<IReadOnlyDictionary<string, object?>> data,
        string columnName)
    {
        try
        {
            _logger?.LogInformation("Sorting data by column {ColumnName} in descending order", columnName);
            var result = await _sortService.SortAsync(data, columnName, SortDirection.Descending);
            return result.SortedData;
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Error during descending sort operation");
            throw;
        }
    }

    /// <summary>
    /// PUBLIC API: Get sortable column names
    /// UTILITY: Help users understand available columns for sorting
    /// </summary>
    public IReadOnlyList<string> GetSortableColumns(IEnumerable<IReadOnlyDictionary<string, object?>> data)
    {
        try
        {
            return _sortService.GetSortableColumns(data);
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Error getting sortable columns");
            throw;
        }
    }

    #endregion

    #region Import Operations

    /// <summary>
    /// PUBLIC API: Import data from DataTable
    /// INTEGRATION: Common enterprise data source
    /// </summary>
    public async Task<bool> ImportFromDataTableAsync(
        DataTable dataTable,
        CancellationToken cancellationToken = default)
    {
        try
        {
            _logger?.LogInformation("Starting DataTable import with {RowCount} rows", dataTable.Rows.Count);
            var result = await _importExportService.ImportFromDataTableAsync(dataTable, null, cancellationToken);
            return result.IsSuccess;
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Error during DataTable import");
            throw;
        }
    }

    /// <summary>
    /// PUBLIC API: Import data from CSV content
    /// FILE INTEGRATION: Common data exchange format
    /// </summary>
    public async Task<bool> ImportFromCsvAsync(
        string csvContent,
        CancellationToken cancellationToken = default)
    {
        try
        {
            _logger?.LogInformation("Starting CSV import");
            var result = await _importExportService.ImportFromCsvAsync(csvContent, null, cancellationToken);
            return result.IsSuccess;
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Error during CSV import");
            throw;
        }
    }

    #endregion

    #region Export Operations

    /// <summary>
    /// PUBLIC API: Export data to CSV format
    /// FILE GENERATION: Standard data export format
    /// </summary>
    public async Task<string> ExportToCsvAsync(
        IEnumerable<IReadOnlyDictionary<string, object?>> data,
        CancellationToken cancellationToken = default)
    {
        try
        {
            _logger?.LogInformation("Starting CSV export");
            var result = await _importExportService.ExportToCsvAsync(data, null, cancellationToken);

            if (result.IsSuccess && result.ExportedContent != null)
            {
                return result.ExportedContent;
            }

            throw new InvalidOperationException($"CSV export failed: {string.Join(", ", result.Errors)}");
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Error during CSV export");
            throw;
        }
    }

    /// <summary>
    /// PUBLIC API: Export data to JSON format
    /// MODERN FORMAT: Structured data export
    /// </summary>
    public async Task<string> ExportToJsonAsync(
        IEnumerable<IReadOnlyDictionary<string, object?>> data,
        CancellationToken cancellationToken = default)
    {
        try
        {
            _logger?.LogInformation("Starting JSON export");
            var result = await _importExportService.ExportToJsonAsync(data, null, cancellationToken);

            if (result.IsSuccess && result.ExportedContent != null)
            {
                return result.ExportedContent;
            }

            throw new InvalidOperationException($"JSON export failed: {string.Join(", ", result.Errors)}");
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Error during JSON export");
            throw;
        }
    }

    #endregion

    #region Utility Operations

    /// <summary>
    /// PUBLIC API: Get supported import formats
    /// DISCOVERY: Help users understand capabilities
    /// </summary>
    public IReadOnlyList<string> GetSupportedImportFormats()
    {
        try
        {
            var formats = _importExportService.GetSupportedImportFormats();
            return formats.Select(f => f.ToString()).ToList();
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Error getting supported import formats");
            throw;
        }
    }

    /// <summary>
    /// PUBLIC API: Get supported export formats
    /// DISCOVERY: Help users understand capabilities
    /// </summary>
    public IReadOnlyList<string> GetSupportedExportFormats()
    {
        try
        {
            var formats = _importExportService.GetSupportedExportFormats();
            return formats.Select(f => f.ToString()).ToList();
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Error getting supported export formats");
            throw;
        }
    }

    #endregion
}